# -*- coding: utf-8 -*-
#
# Script to execute test cases from one suite in parallel
# by thomas klein / 2009
#
 
# imports
from robot.running import TestSuite
from robot import utils
from robot.conf import settings
import os, glob
import subprocess
import time
from datetime import datetime
import sys
import getopt
import fileinput
import PyroConfig as config
 
# save current time to calculate execution time at the end of the script
startTime = datetime.now()
 
# global vars
suite_name = "No suite defined yet" # specified via args
includeTags = [] # specified via args
excludeTags = [] # specified via args
argumentFiles = []
listeners = []
 
para_tag = "parallel"
seri_start_tag = "SERIES_START"
seri_end_tag = "SERIES_END"
 
clientCwd = "No cwd defined" # specified via testsuite from args
forceSerialExecution = False
baseDir = "./"
 
 
# reading variables from ParabotConfig
max_parallel_tests = config.MAX_PARALLEL_TESTS
min_test_per_block = config.MIN_TESTS_PER_BLOCK
time_between_test_start_up = config.time_between_test_start_up
logFolder = config.LOG_DIR
#antBatch = os.path.abspath(config.ANT_BATCH_FILE)
#seCwd = os.path.abspath(config.SELENIUM_GRID_DIR)
#startSelenium = config.AUTOSTART_SELENIUM
#browser = config.SELENIUM_BROWSER
 
 
# Methods #####################################################################################################
 
def process_suite(suite, testList):
    for test in suite.tests:
        itest = check_tags(test)
        if itest==1:
            listOfTests.append(test)
       
    for subsuite in suite.suites:
        process_suite(subsuite, testList)
               
    return listOfTests
 
def check_tags(test):
 
    itest=0
    etest=0
    if len(excludeTags)==0:
        if len(includeTags)==0:
                   itest=1
        else:
            for itag in includeTags:
                for tag in test.tags:
                    if tag==itag:
                       itest=1
    else:
        for etag in excludeTags:
            for tag in test.tags:
                if tag==etag:
                    etest=1
        if len(includeTags)==0:
            itest=1
        else:
            for itag in includeTags:
                for tag in test.tags:
                    if tag==itag:
                        itest=1
 
    if etest==1:
            return 0
    else:
        return itest
       
def is_test_series(test):
    series = -1
    for tag in test.tags:
        if tag==seri_start_tag:
            series=1
        if tag ==seri_end_tag:
            series=2
    return series
 
 
 
def splitTestsToBlocks(tests):
    """ Splits a list of tests into several small lists (blocks) and returns a list containing these lists.
    'MAX_PARALLEL_TESTS' and 'MIN_TESTS_PER_BLOCK' will be used as criteria for splitting the list. For
    details see configuration hints in ParabotConfig.py.
    """
    para_test_blocks = []
    number_of_blocks = -1
    if len(tests) / min_test_per_block > max_parallel_tests:
        number_of_blocks = max_parallel_tests
    else:
        number_of_blocks = len(para_tests) / min_test_per_block
    for i in range(0, number_of_blocks):
        para_test_blocks.append([])
    current_block = 0
    for test in tests:
        block = current_block%number_of_blocks
        para_test_blocks[block].append(test)
        current_block = current_block+1
    return para_test_blocks
 
 
 
def startJybot(name, tests, suite, args=[]):
    """ Creates a pybot object, starts it and returns the object
    'name' is the name for the pybot (will be used for log outputs)
    'tests' is a list of tests to be executed by the pybot
    'suite' is the filename of the test suite containing the 'tests'
    'args' (optional) is a list of additional parameters passed to pybot
    """
    jybot = Jybot(name)
    jybot.start(tests, suite, args)
    return jybot
 
def generateReportAndLog(xmlFiles, reportFile, logFile):
    """ Calls RobotFrameworks rebot tool to generate Report and Log files from output.xml files
    'xmlFiles' is a list of output.xml files from jybot / pybot
    'reportFile' is the path+name of the report.html file to be written
    'logFile' is the path+name of the log.html file to be written
    the global variable 'suite_name' will be used a report title
    """
    rebotCommand = "rebot.bat --log %s --report %s --reporttitle \"%s\" " % (logFile, reportFile, suite_name)
    for file in xmlFiles:
        rebotCommand = rebotCommand + "%s " % file
    rc = os.system(rebotCommand)
    return rc
 
def parseArgs(argv):
    """ Parses command line arguments like the testsuite name and additonal parameters
    Expects the command line args without the python class as parameter argv (sys.argv[1:])
    Fails and aborts script if args don't match the expected format
    """
    global includeTags, excludeTags, suite_name, clientCwd, forceSerialExecution, baseDir, logFolder, testsToRun, suiteToRun, testDirectory
    if len(argv)<1:
        usage()
        sys.exit(2)
   
    # last argument is test suite name
    suite_name = argv[len(argv)-1]
    suiteToRun = argv[len(argv)-1]
    args_file = argv[len(argv)-4]
    print "args_file: %s" % args_file
    lines = []
    append = False
    for line in fileinput.input(args_file):
        if line.startswith("--include="):
            print "including tag %s" %line.replace("--include=","")
            includeTags.append(line.replace("--include=","").rstrip('\n'))
        if line.startswith("--exclude="):
            print "excluding tag %s" %line.replace("--exclude=","")
            excludeTags.append(line.replace("--exclude=","").rstrip('\n'))
        if append:
            lines.append(line.rstrip('\n'))
            append = False
        elif line.strip() == '--test':
            append = True
       
    testsToRun = lines
    clientCwd, suite_name = os.path.split(suite_name)
    if len(clientCwd) == 0:
        clientCwd = "./"
    testDirectory = clientCwd
    #last commented line
    #suite_name = os.path.join(baseDir, suite_name)
    logFolder = os.path.join(baseDir, logFolder)
    logFolder = os.path.abspath(logFolder)
    print "Base dir: %s" % baseDir;
    clientCwd = os.path.realpath(baseDir);
    print "Working dir: %s" % os.path.realpath(clientCwd)
    print "Base dir: %s" % os.path.realpath(baseDir);
    print "Log dir: %s" % logFolder
    print "Executing suite: %s" % suite_name
 
def getDynArgs(index):
    """ Reads the DYN_ARGS variable from the config file and parses it into a list of argument strings
    like --variable name:"value".
    This list can be passed to the Pybot start() method as args[] list.
    """
    arglist = []
    for row in config.DYN_ARGS:
        valueIndex = index
        if len(row) < 2:
            print "Error reading DYN_ARGS: Row is invalid: %s. Row will be skipped!" % row
        else:
            varName = row[0]
            values = []
            i = 1
            while i < len(row):
                values.append(row[i])
                i = i+1
            if valueIndex >= len(values):
                valueIndex = (len(values)-1) % valueIndex
            varValue = values[valueIndex]
            arglist.append("--variable %s:\"%s\"" % (varName, varValue))
    return arglist
 
def usage():
    """ Prints usage information for Parabot """
    print ""
    print "Usage: python parabot.py [options] <testsuite.tsv>"
    print ""
    print "<testsuite.tsv> can be absolute or relative path + filename of a testsuite."
    print "The containing folder will be used as working directory"
    print ""
    print "Options:"
    print "-h\t--help\t\tThis screen"
    print "-i\t--include\tInclude a tag"
    print "-e\t--exclude\tExclude a tag"
    print "-f\t--forceserial\tForces serial test execution"
    print "-b\t--basedir\tSet parabots base dir"
    print ""
 
# helper classes ##############################################################################################
 
class Jybot():
    """ Helper class to interact with RobotFrameworks pybot script to execute tests / test suites.    
    """
    name = ""
    tests = []
    suite = ""
    args = []
    output = ""
    process = -1
    running = False
   
    def __init__(self, name):
        """ Constructor, creates the object and assigns the given 'name'.
        """
        self.name = name
        print "Created jybot %s." %name
   
    def start(self, tests, suite, args=[]):
        """ Starts the pybot script from RobotFramework executing the defined 'tests' from the given 'suite'.
        'tests' is a list of tests to be executed by the pybot
        'suite' is the filename of the test suite containing the 'tests'
        'args' (optional) is a list of additional parameters passed to pybot
        """
        self.tests = tests
        self.suite = suite
        self.args = args
        temp, suiteName = os.path.split(suite_name)
        self.output = "%s_%s_Output.xml" % (suiteName, self.name)
        jybotCommand = "RunTestsInSeries.bat "
        #for argFile in self.argumentFiles:
        #    jybotCommand = jybotCommand + "-A %s " % argFile
        for test in self.tests:
            jybotCommand = jybotCommand + "-t \"%s\" " % test
        #for arg in self.args:
        #    jybotCommand = jybotCommand + arg + " "
        jybotCommand = jybotCommand + "-o %s " % os.path.join(logFolder, self.output)
        #jybotCommand = jybotCommand + "-l NONE "
        #jybotCommand = jybotCommand + "-r NONE "
        #jybotCommand = jybotCommand + "-N \"%s %s\" " % (suiteName, self.name)
        jybotCommand = jybotCommand + suiteToRun
        print jybotCommand
        jyLog = open(os.path.join(logFolder, ("Jybot_%s_Log.txt" % self.name)), "w")
        print "Starting jybot %s ..." % self.name
        self.running = True
        self.process = subprocess.Popen(jybotCommand, cwd=clientCwd, stdout=jyLog, stderr=jyLog)
   
    def isRunning(self):
        """ Polls the pybot subprocess to check if it's running. Will return true if the process is running.
        Returns false if the process hasn't been started or has finished already.
        """
        if not self.running:
            return False
        elif self.process.poll() == 0 or self.process.returncode >= 0:
            return False
        else:
            return True
   
    def stop(self):
        """ Kills the pybot subprocess.
        """
        os.system("taskkill /T /F /PID %s" % self.process.pid)
        self.running = False
 
# MAIN SCRIPT #################################################################################################
 
# parsing command line arguments
parseArgs(sys.argv[1:])
 
# generating two lists containing parallel and serial tests
para_tests = []
seri_tests = []
seri_start_tests = []
seri_end_tests = []
 
 
suiteOps = settings.RobotSettings()
suite = TestSuite([os.path.join(testDirectory, suite_name)], suiteOps)
 
listOfTests = []
 
process_suite(suite, listOfTests)              
 
print "Number of tests = %s" %len(listOfTests)
 
 
#for test in suite.tests:
for test in listOfTests:
    #print "run %s?" %test.longname
    for testToRun in testsToRun:
        if test.longname == testToRun:
            print "going to run %s" %test.name
            series = is_test_series(test)
            if series==-1:
                para_tests.append(test)
            if series==1:
                seri_start_tests.append(test)
            if series==2:
                seri_end_tests.append(test)
 
 
   
 
#old loop to add tests to parallel
#for test in testsToRun:
#    print "appending test %s" %test
#    para_tests.append(test)
 
# output serial test list
print ""
print "Serial Start tests:"
if len(seri_start_tests) == 0:
    print "NONE"
else:
    for test in seri_start_tests:
        print test
print ""        
 
   
# splitting parallel tests into blocks
para_test_blocks = splitTestsToBlocks(para_tests)
 
# output parallel test list
print ""
print "Parallel Blocks:"
for block in para_test_blocks:
    print ""
    for test in block:
        print test
if len(para_test_blocks) == 0:
    print "NONE"
print ""
 
 
print "Serial End tests:"
if len(seri_end_tests) == 0:
    print "NONE"
else:
    for test in seri_end_tests:
        print test
print ""
 
 
# running serial block
jybot = None
if len(seri_start_tests) > 0:
    print ""
    print "Starting serial tests ..."
    jybot = startJybot("serial_block", seri_start_tests, suite_name, getDynArgs(0))
    while jybot.isRunning():
        time.sleep(time_between_test_start_up)
       
    print "Serial tests finished"
    print ""
 
 
 
 
 
# starting parallel pybots
i = 0;
jybots = []
for block in para_test_blocks:
    dynArgs = getDynArgs(i);
    jybots.append(startJybot("paraBlock_%s" % i, block, suite_name, sys.argv[1:]))
    i = i+1
    # delay start of next jybot
    time.sleep(5)
 
# waiting for parallel tests to finish
finished = False
while not finished:
    time.sleep(10)
    message = "Finished: %s" % finished
    finished = True
    for jybot in jybots:
        message = "%s | %s: " % (message, jybot.name)
        if jybot.isRunning():
            finished = False
            message = "%s%s" % (message, "Running")
        else:
            message = "%s%s" % (message, "DONE")
    print message
       
print "Parallel Tests finished ..."
 
 
# running serial block
jybot = None
if len(seri_end_tests) > 0:
    print ""
    print "Starting serial tests ..."
    jybot = startJybot("serial_block", seri_end_tests, suite_name, getDynArgs(0))
    while jybot.isRunning():
        time.sleep(time_between_test_start_up)
       
    print "Serial tests finished"
    print ""
 
 
 
# merging outputs to one report and log
print "Generating report and log"
temp, suiteName = os.path.split(suite_name)
report = "%s_Report.html" % os.path.join(logFolder, suiteName)
log = "%s_Log.html" % os.path.join(logFolder, suiteName)
outputXmls = []
if jybot != None:
    outputXmls.append(os.path.join(logFolder, jybot.output))
for jybot in jybots:
    outputXmls.append(os.path.join(logFolder, jybot.output))
 
reportRC = generateReportAndLog(outputXmls, report, log)
 
 
# delete XML output files after generating the report / log (if report generation
# returned zero)
#if reportRC == 0:
#    for outXML in outputXmls:
#        os.remove(outXML)
 
# calculating test execution time
endTime = datetime.now()
executionTime = endTime - startTime
print ""
print "Execution time: %s" % executionTime